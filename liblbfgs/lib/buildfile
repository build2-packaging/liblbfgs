# Public headers.
#
pub = [dir_path] ../include/

include $pub

pub_hdrs = $($pub/ pub_hdrs)

lib{lbfgs}: libul{lbfgs}: $pub/{$pub_hdrs}

# Private headers and sources as well as dependencies.
#
libul{lbfgs}: {h c}{**}

libs{lbfgs}: def{lbfgs}: include = ($c.target.system == 'win32-msvc')
def{lbfgs}: libul{lbfgs}

# Build options.
#
src_pfx_inc = [dir_path] $src_root/include/
src_pfx_src = [dir_path] $src_root/lib/

c.poptions =+ "-I$src_pfx_src" "-I$src_pfx_inc"

# Add lbfgs specific public options
poptions = "-I$src_pfx_inc"

if ($config.liblbfgs.use_double)
{
    poptions += "-DLBFGS_FLOAT=64"
}
else
{
    poptions += "-DLBFGS_FLOAT=32"
}

if ($config.liblbfgs.use_IEEE754)
{
    poptions += "-DLBFGS_IEEE_FLOAT=0"
}
else
{
    poptions += "-DLBFGS_IEEE_FLOAT=1"
}

# Needs checks for header files which are included in lbfgs.c
#if ($config.liblbfgs.use_SSE)
#{
#    c.poptions += USE_SSE
#    if($config.liblbfgs.use_double)
#    {
#        #Incomplete, needs check for xmmintrin.h
#        if ($c.target.system == 'win32-msvc')
#        {
#            c.poptions += __SSE2__
#        }
#    }
#    else
#    {
#        #Incomplete needs check for emmintrin.h
#        if ($c.target.system == 'win32-msvc')
#        {
#            c.poptions += __SSE__
#        }
#    }
#}
  

if ($c.target.system == 'mingw32')
{
  c.loptions += -Wl,--export-all-symbols
}

if ($c.target.class != 'windows')
{
  c.libs += -lm
}

# Export options.
#
lib{lbfgs}:
{
  c.export.poptions = $poptions
}

# For pre-releases use the complete version to make sure they cannot
# be used in place of another pre-release or the final version. See
# the version module for details on the version.* variable values.
#
if $version.pre_release
  lib{lbfgs}: bin.lib.version = "-$version.project_id"
else
  lib{lbfgs}: bin.lib.version = "-$version.major.$version.minor"

# Don't install private headers.
#
h{*}: install = false
